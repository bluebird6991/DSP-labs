function [Ust, Mnrs, Mtrx] = raus_gur(D)
% Определение устойчивости системы методом Рауса-Гурвица, заданной при
% помощи следующей передаточной функции.
% 
%          B(s)   
%   W(s) = ----,
%          D(s)     
% 
% Здесь D(s) - характеристический полином.
% 
% D(s) = a0*s^n + a1*s^(n-1) + a2*s^(n-2) + ... + an 
%  
%   a0, a1, a2, ..., an - коэффициенты полинома D.
% 
% 
% Обращение к функции RAUS_GUR может быть выполнено двумя способами:
% 
%   Способ 1.
% 
%   [Ust, Mnrs, Mtrx]  = RAUS_GUR(D);
% 
%   Входные параметры:
% D - вектор коэффициентов знаменателя (характеристический полином)
% 
%   Выходные параметры:
% Ust - логический параметр, характеризующий результат работы функции:
%   Ust = 1 - система устойчива
%   Ust = 0 - система не устойчива
%  
% Mnrs - вектор значений миноров от меньшего размера к большему,
% которые необходимо вычислить для оценки устойчивости по методу Рауса-Гурвица.
% Согласно методу Рауса-Гурвица, система устойчива, если все миноры положительны.
% Вычисления значения внешнего минора не имеют смысла, так как его знак
% всегда будет совпадать со знаком предыдущего минора.
% 
% Mtrx - полная матрица Рауса-Гурвица для данного полинома.
% 
%   Способ 2.
% 
%   [Ust, Mnrs, Mtrx]  = RAUS_GUR(W);
% 
%   Входные параметры:
% W - объект класса LTI (см. описание Control System Toolbox)  
% 
% Выходные параметры аналогичны вышеописанным.
% 
% 
% Если размер характеристического полинома три и менее коэффициентов, 
% то значения выходных параметрв Mnrs и Mtrx принимают значение NaN.
% 
% Ориентирована на работу в версии MATLAB 5.3

if isa(D, 'lti')
   [B, D] = tfdata(D, 'v');
end
Ust = 1; 
if length(D(:)) < 4
    Mtrx = NaN; Mnrs = NaN;
    if any(D(:) <= 0)
        Ust = 0;
    end
    return
end
D = D(:);
n = length(D) - 1; % Размеры матрицы Гурвица
A = [zeros(n-1, 1); D(end:-1:1); zeros(n-2, 1)];
Mtrx = zeros(n, n); % Заготовка матрицы Гурвица
Mnrs = zeros(n-2, 1); % Вектор миноров
for i = 1:n
    Mtrx(:, i) = A((n - i)*2 + 1:3*n - 2*i);   
end
for i = 2:n-1
    Mnrs(i-1) = det(Mtrx(1:i,1:i));
end
if any([D(:); Mnrs(:)] <= 0)
    Ust = 0;
end